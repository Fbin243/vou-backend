services:
  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      vou_network:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.0.0
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-config

  minio:
    image: minio/minio:RELEASE.2024-05-27T19-17-46Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-config

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-config
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana:11.0.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-config

  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-config

  gateway:
    image: nginx:1.25.5
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-config

  ############### MY SQL #####################
  mysqldb:
    image: mysql:8.0
    ports:
      - 3300:3306
    container_name: mysqldb
    environment:
      MYSQL_DATABASE: mysqldb
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql-data:/var/lib/mysql
    extends:
      file: common-config.yml
      service: db-config

  ############## MESSAGE BROKER #####################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    extends:
      file: common-config.yml
      service: base-config

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://kafka:9092
      KAFKA_LISTENER_NAME: EXTERNAL # Default listener name for external connections
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL # Listener name used for broker-to-broker communication
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Replication factor for the offsets topic, common practice is 3 or <= number of brokers
    extends:
      file: common-config.yml
      service: base-config

  ###################### SERVICES ##########################
  discovery-server:
    image: haina2410/discovery-server
    container_name: discovery-server
    ports:
      - 8761:8761
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: base-config
    environment:
      SPRING_APPLICATION_NAME: "discovery-server"

  users:
    image: haina2410/users
    container_name: users
    ports:
      - 8081:8081
    healthcheck:
      test: "curl --fail --silent localhost:8081/users/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "users"
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysqldb:3306/usersdb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    depends_on:
      mysqldb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: discovery-config

  identity:
    image: haina2410/identity
    container_name: identity
    ports:
      - 8071:8071
    healthcheck:
      test: "curl --fail --silent localhost:8071/identity/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "identity"
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysqldb:3306/identitydb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      APP_SERVICES_USERS: "http://users:8081/users"
    depends_on:
      mysqldb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: discovery-config

  games:
    image: haina2410/games
    container_name: games
    ports:
      - 8082:8082
    healthcheck:
      test: "curl --fail --silent localhost:8082/games/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "games"
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysqldb:3306/gamesdb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    depends_on:
      mysqldb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: discovery-config

  events:
    image: haina2410/events
    container_name: events
    ports:
      - 8083:8083
    healthcheck:
      test: "curl --fail --silent localhost:8083/events/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "events"
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysqldb:3306/eventsdb"
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      mysqldb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: discovery-config

  sessions:
    image: haina2410/sessions
    container_name: sessions
    env_file:
      - ../stack.env
    ports:
      - 8084:8084
    healthcheck:
      test: "curl --fail --silent localhost:8084/sessions/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "sessions"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    extends:
      file: common-config.yml
      service: discovery-config

  notifications:
    image: haina2410/notifications
    container_name: notifications
    ports:
      - 8086:8086
    healthcheck:
      test: "curl --fail --silent localhost:8086/notifications/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /google/serviceAccountKey.json
      SPRING_APPLICATION_NAME: "notifications"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    extends:
      file: common-config.yml
      service: discovery-config

  api-gateway:
    image: haina2410/api-gateway
    container_name: api-gateway
    ports:
      - 8888:8888
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      identity:
        condition: service_healthy
      users:
        condition: service_healthy
    environment:
      DISCOVERY_SERVER_URI: "http://discovery-server:8761"
    extends:
      file: common-config.yml
      service: discovery-config

################ NETWORK ###############
networks:
  vou_network:
    driver: bridge

################ VOLUME ###############
volumes:
  mysql-data:
  metabase-data:
